
環境建立
------

##### 1. 安裝TypeScript

首先在環境中安裝typescipt,他是一個全域的插件

```
npm install -g typescript
```

> typkescript雖然可以讓javascript擁有強型別的特性

> 但最終還是需要轉換成javascript網頁才能認得

> 所以還是需樣有一個轉換的工具

編譯工具
------

**gulp**

這邊一樣使用gulp來處理typescript轉換

透過npm安裝gulp編譯typescript的套件

```
npm install gulp-typescript
```

```
var ts = require("gulp-typescript");

gulp.task("ts", function () {
    //// .ts檔路徑
   return gulp.src(path.ts)
      .pipe(ts())
      //// build完js放置的位置
      .pipe(gulp.dest("Script/"));
});
```


 型別
------

**基本型別**

```
//// 數字
var a:Number = 0;

//// 字串
var b:String = "aaa";

//// 布林
var c:boolean = false;
```

**Array**

```
//// 陣列的2種表示方式
var users: string[] = ["aa","bb"];
var users2: Array<string> = ["aa","bb"];
```

Enum
------
>設定一組名稱用來解釋一些常數型的狀態

```
enum color {
    red,
    pink,
    black
};
```

實際轉換成js時會轉換成一組object其val就是數字從0開始

```
//// 也可指定val
enum color {
    red  = 1,
    pink = 3,
    black = 5
};
```

應用時可以將變數宣告為Enum

```
var book:color = color.red;

//// 這邊會console 出數字（ex:0）
console.log("列舉 ==>",book);

```


Interface
------

設定一組object格式讓繼承此interface需實做此規格

>屬性加上 ? 表示此屬性不一定要被實作

```
interface user {
    //// 須針對所定定義之屬性定義型別
    name: string;
    age: number;
    gender?: boolean;
    fun?(age: number):boolean;
}
```


來看看interface怎麼被繼承

> object變數 將型別設定為interface

> 該變數必須實作interface所以有屬性(除了設定?的屬性)

```
var mia:user = {
    name:"mia",
    age:28
}
```

> 也可設定為function參數之內容,傳入參數必須符合interface的格式
```
function createUser(data:user){
    console.log("interface object=> ",data.name,data.age,data.gender);
}
```
